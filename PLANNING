1.
Create Character:
Dictionary!
{"Name": value, "Hair": value, "Height": value, "build": value, "mass": value, "arm_strength": value,  }
a/ Choice of race of characters?
 - makes no difference. People can be carrots or peas or rabbits or gherkins.
 - they will be asked how many legs they have.
    - if legs > 4, no arms, the manoeuvrability drops the more legs.
    - if legs == 4, max two arms, speed increased if no arms, if they have arms, speed cut back to a specific value.
    - if legs == 3, tripod, speed reduced but super sturdy.
    - if legs == 2, vaguely humanoid.
    - if legs < 2, 
       ^-> how are you getting about? Wheels, speed

b/ Explanation of Characteristics (stats)
c/ Rolling the character
        1/ Hair style
        2/ Body height
        3/ Body build
        4/ Body mass
        5/ Arm strength
        6/ Upper body strength
        7/ Lower body strength
        8/ Hand speed
        9/ Body speed
        10/ Foot speed
        11/ Manoeuvrability
        11/ Dogmatism
        12/ Pragmatism
        13/ Susceptibility
        14/ Cynicism
        15/ Curiosity

11 - 15 are defined by player. Intelligence should therefore be left untouched - a random or undefined.

d/ Giving them a description (a type)
e/ Showing the final built character

# 27 / 10 / 2021 - thought on Characteristics: MODIFIERS
What if player is shown values (like up to 18 (which people will automatically want to exceed)or up to 100, which makes more sense - a godlike character would be 100% in a bunch of them...) but the program
works it out from a modifier, so 50% = +0, 60 = +10.

Then, when tests are made, the modifier is simply added to the test, instead of having to look at the stat and work it out. 

It would also mean that the dictionary containing the characteristics could
use {"arm_strength": -26}  and show f"Your ARM STRENGTH IS {(50+-26)}\%".

Would we actually need a dictionary?! NO!

2.
Choice of Directions - illustrated by features.

SPELS!
^^^^^^
notes: if players cast spells, they should be taught the spell at the start. 
datetime.datetime.now() will be logged as the character is asked what they want to do, and then once the input() has been made. If the time taken to input the command is greater than a certain time, chances are they'll suffer damage from the opposing character. It will also effect the next stage:
    Spells should have some form of levelling - as they are used more often, the casting becomes quicker. So say a Fireball starts as
    "H8SFA JFASD:N P&7fHH", the next stage, after first use, would be:
    "HSFA JFASDN P7fHH", down to "H J P" at the highest level.

    By being taught spells once at the start, people smart enough to write it down, or fucking copy it to a clipboard item, will be able to just paste the spell in. Silly people will be scrolling or just getting it wrong.

Current Plan:
^^^^^^^^^^^^
Spells created on first run of game.

if <spellbook.json> exists:
	open(spellbook.json) and read()
else:
	run create spells function
		to write to spellbook.json
			taking data (name and description) from 
			spellhints and spellbook.txt to make the spells
			for that playthrough.

SCENARIOS!
^^^^^^^^^^
There should be some way to create a random adventure. A massive array of options?

GRAPHICS
^^^^^^^^
Would be nice. Ideally as an ascii representation.
